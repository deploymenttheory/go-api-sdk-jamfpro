name: auto-merge dependabot updates

on:
  pull_request:
    branches: [ main ]

permissions:
  pull-requests: write
  contents: write

jobs:
  dependabot-merge:
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' }}

    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2.2.0
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      # Process Go dependencies
      - name: Checkout repository
        uses: actions/checkout@v4
        if: ${{ steps.metadata.outputs.package-ecosystem == 'gomod' }}

      - name: Setup Go
        uses: actions/setup-go@v5
        if: ${{ steps.metadata.outputs.package-ecosystem == 'gomod' }}
        with:
          go-version: 'stable'

      - name: Process Go dependencies sequentially
        if: ${{ steps.metadata.outputs.package-ecosystem == 'gomod' }}
        run: |
          # Function to create a summary block in the logs
          create_update_summary() {
            local pr_number=$1
            local dep_names=$2
            local previous_version=$3
            local new_version=$4
            
            echo "::group::Dependency Update Summary for PR #$pr_number"
            echo "üîÑ Dependencies being updated:"
            echo "$dep_names" | tr ',' '\n' | while read -r dep; do
              if [ ! -z "$dep" ]; then
                echo "  ‚Ä¢ $dep"
              fi
            done
            echo "üì¶ Version: $previous_version ‚Üí $new_version"
            echo "::endgroup::"
          }
          
          # Get all open Go-related Dependabot PRs
          echo "üîç Fetching all Go-related Dependabot PRs..."
          GO_PRS=$(gh pr list \
            --author "dependabot[bot]" \
            --json number,title,headRefName,body,baseRefName \
            --state open \
            --jq '.[] | select(.body | contains("go.mod"))')
          
          # Process each PR sequentially
          echo "$GO_PRS" | while read -r pr; do
            PR_NUMBER=$(echo "$pr" | jq -r .number)
            HEAD_BRANCH=$(echo "$pr" | jq -r .headRefName)
            BASE_BRANCH=$(echo "$pr" | jq -r .baseRefName)
            
            # Fetch metadata for this specific PR
            PR_METADATA=$(gh pr view $PR_NUMBER --json title,body)
            
            echo "‚öôÔ∏è Processing PR #$PR_NUMBER ($HEAD_BRANCH)"
            
            # Get dependency metadata for this PR
            TEMP_META=$(gh api /repos/$GITHUB_REPOSITORY/pulls/$PR_NUMBER/dependency-metadata)
            DEP_NAMES=$(echo "$TEMP_META" | jq -r '.dependency-names')
            PREV_VERSION=$(echo "$TEMP_META" | jq -r '.previous-version')
            NEW_VERSION=$(echo "$TEMP_META" | jq -r '.new-version')
            
            # Create summary for this PR
            create_update_summary "$PR_NUMBER" "$DEP_NAMES" "$PREV_VERSION" "$NEW_VERSION"
            
            # Ensure we're on a clean state
            git fetch origin $BASE_BRANCH
            git checkout $BASE_BRANCH
            git pull origin $BASE_BRANCH
            
            # Checkout the PR branch
            echo "üì• Checking out PR branch $HEAD_BRANCH"
            git fetch origin $HEAD_BRANCH
            git checkout $HEAD_BRANCH
            git pull origin $HEAD_BRANCH
            
            # Run go mod tidy for this PR
            echo "üõ†Ô∏è Running go mod tidy for PR #$PR_NUMBER"
            go mod tidy
            
            # Commit and push changes if any
            if git diff --quiet; then
              echo "‚ú® No changes after go mod tidy for PR #$PR_NUMBER"
            else
              echo "üíæ Committing changes for PR #$PR_NUMBER"
              git config --global user.name "GitHub Actions"
              git config --global user.email "actions@github.com"
              git commit -am "chore: go mod tidy for PR #$PR_NUMBER"
              git push origin $HEAD_BRANCH
            fi
            
            # If this is the current PR and it's not a major version update, enable auto-merge
            if [ "$PR_NUMBER" = "$CURRENT_PR_NUMBER" ] && \
               [ "$UPDATE_TYPE" != "version-update:semver-major" ]; then
              echo "ü§ñ Enabling auto-merge for PR #$PR_NUMBER"
              gh pr merge --auto --merge "$CURRENT_PR_URL"
            fi
            
            echo "‚úÖ Completed processing PR #$PR_NUMBER"
            echo "-------------------------------------------"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CURRENT_PR_NUMBER: ${{ github.event.pull_request.number }}
          CURRENT_PR_URL: ${{ github.event.pull_request.html_url }}
          UPDATE_TYPE: ${{ steps.metadata.outputs.update-type }}

      # Auto-merge pipeline dependencies
      - name: Enable auto-merge for pipeline dependencies
        if: |
          steps.metadata.outputs.update-type != 'version-update:semver-major' && 
          contains(steps.metadata.outputs.directory, '.github/workflows')
        run: |
          echo "::group::Pipeline Dependency Update Summary"
          echo "üîÑ Dependencies being updated:"
          echo "${{ steps.metadata.outputs.dependency-names }}" | tr ',' '\n' | while read -r dep; do
            if [ ! -z "$dep" ]; then
              echo "  ‚Ä¢ $dep"
            fi
          done
          echo "üì¶ Version: ${{ steps.metadata.outputs.previous-version }} ‚Üí ${{ steps.metadata.outputs.new-version }}"
          echo "::endgroup::"
          gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      # Auto-merge other dependencies
      - name: Enable auto-merge for other dependencies
        if: |
          steps.metadata.outputs.update-type != 'version-update:semver-major' && 
          steps.metadata.outputs.package-ecosystem != 'gomod' &&
          !contains(steps.metadata.outputs.directory, '.github/workflows')
        run: |
          echo "::group::Other Dependency Update Summary"
          echo "üîÑ Dependencies being updated:"
          echo "${{ steps.metadata.outputs.dependency-names }}" | tr ',' '\n' | while read -r dep; do
            if [ ! -z "$dep" ]; then
              echo "  ‚Ä¢ $dep"
            fi
          done
          echo "üì¶ Version: ${{ steps.metadata.outputs.previous-version }} ‚Üí ${{ steps.metadata.outputs.new-version }}"
          echo "::endgroup::"
          gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}